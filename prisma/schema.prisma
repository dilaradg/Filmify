  generator client {
    provider        = "prisma-client"
    output          = "../src/generated/prisma"
    previewFeatures = ["nativeDistinct", "relationJoins"]
    engineType      = "client"
  }
  datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    schemas  = ["film"]
  }

model Abbildung {
  id           Int     @id @default(autoincrement())
  beschriftung String
  contentType  String  @map("content_type")
  filmId       Int     @map("film_id")
  film         Film    @relation(fields: [filmId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([filmId])
  @@map("abbildung")
  @@schema("film")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Film {
  id           Int         @id @default(autoincrement())
  version      Int         @default(0)
  imdbId       String       @unique @map("imdb_id")
  rating       Int
  art          Filmart?
  runtime_min  Int?
  release_date DateTime?   @db.Date
  erzeugt      DateTime    @default(now()) @db.Timestamp(6)
  aktualisiert DateTime    @default(now()) @db.Timestamp(6)
  abbildungen  Abbildung[]
  filmFile     FilmFile?
  titel        Titel?

   @@map("film")
  @@schema("film")
}

model FilmFile {
  id       Int     @id @default(autoincrement())
  data     Bytes
  filename String
  mimetype String?
  filmId   Int     @unique @map("film_id")
  film     Film    @relation(fields: [filmId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([filmId])
  @@map("film_file")
  @@schema("film")
}

model Titel {
  id      Int    @id @default(autoincrement())
  titel   String
  filmId  Int    @unique @map("film_id")
  film    Film   @relation(fields: [filmId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([titel])
  @@map("titel")
  @@schema("film")
}

enum Filmart {
  ROMCOM
  THRILLER
  DRAMA

  @@map("filmart")
  @@schema("film")
}
